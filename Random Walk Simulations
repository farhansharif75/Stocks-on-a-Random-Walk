import numpy as np
import matplotlib.pyplot as plt
import random
import pylab
from matplotlib import animation
from matplotlib.animation import FuncAnimation
import pandas as pd
from scipy.stats import levy_stable
import scipy.stats as stats
from scipy.signal import find_peaks
import math

#%%

#Simulate a 1D random walk, with discrete steps

def randomwalk1D(n):
    x, y = 0, 0
    # Generate the time points [1, 2, 3, ... , n]
    timepoints = np.arange(n + 1)
    positions = [y]
    directions = ["UP", "DOWN"]
    for i in range(1, n + 1):
        # Randomly select either UP or DOWN
        step = random.choice(directions)
        
        # Move the object up or down
        if step == "UP":
            y += 1
        elif step == "DOWN":
            y -= 1
        # Keep track of the positions
        positions.append(y)
    return timepoints, positions

#Visualise

time_data, pos_data = randomwalk1D(1000)
plt.plot(time_data, pos_data, 'r-')
plt.title("1D Random Walk in Python")
plt.grid()
plt.ylabel('Toss score')
plt.xlabel('Toss number')

#%%

#Simulate a 2D random walk

n = 1000 #n is the number of steps(increase in the value of n increses the compelxity of graph) 
x = np.zeros(n) # x and y are arrays which store the coordinates of the position 
y = np.zeros(n) 
direction=["NORTH","NE","NW","SOUTH","SE","SW","EAST","WEST"] # Assuming the four directions of movement.
for i in range(1, n): 
    step = random.choice(direction) #Randomly choosing the direction of movement. 
    #plt.pause(0.05)
    if step == "EAST": #updating the direction with respect to the direction of motion choosen.
        x[i] = x[i - 1] + 1
        y[i] = y[i - 1] 
    elif step == "WEST": 
        x[i] = x[i - 1] - 1
        y[i] = y[i - 1] 
    elif step == "NORTH": 
        x[i] = x[i - 1] 
        y[i] = y[i - 1] + 1
    elif step == 'NE':
        x[i] = x[i - 1] + 1/np.sqrt(2)
        y[i] = y[i - 1] + 1/np.sqrt(2)
    elif step == 'NW':
        x[i] = x[i - 1] - 1/np.sqrt(2)
        y[i] = y[i - 1] + 1/np.sqrt(2)
    elif step == 'SE':
        x[i] = x[i - 1] + 1/np.sqrt(2)
        y[i] = y[i - 1] - 1/np.sqrt(2)
    elif step == 'SE':
        x[i] = x[i - 1] - 1/np.sqrt(2)
        y[i] = y[i - 1] - 1/np.sqrt(2)
    else: 
        x[i] = x[i - 1] 
        y[i] = y[i - 1] - 1
        
#Visualise

pylab.title("Random Walk 2-D (8 directions)")
pylab.plot(x, y) #plotting the walk.
pylab.grid()
pylab.xlabel('Pollen x-Position')
pylab.ylabel('Pollen y-Position')
pylab.show()

#%%

#Simulate a Geometric Brownian Motion

def expbm(x, a, b, c):
    return a*np.exp(b*x)+c

xdata = np.linspace(0, 4, 50)
y = expbm(xdata, 2.5, 0.8, 100)
rng = np.random.default_rng()
y_noise = 2 * rng.normal(size=xdata.size)
ydata = y + y_noise
plt.plot(xdata, ydata, label='data')
plt.plot(xdata, expbm(xdata, 2.5,0.8,100), 'black', label="exponential drift", linestyle = "dotted")
plt.xlabel('Time (days)')
plt.ylabel('Stock Price (arbitrary currency)')
plt.legend()
plt.title('Simulated 1D Geometric Brownian Motion')
plt.grid()

#%%

#2D random-walk uniformly distributed directions

def random_walk(n):

    # uniformly distributed angles
    angle = uniform.rvs(size=(n,), loc=.0, scale=2.*np.pi)

    # levy distributed step length
    r = norm.rvs(size=n)

    # x and y coordinates (position added to previous coordinate --> cum. sum)
    x = np.cumsum(r*np.cos(angle))
    y = np.cumsum(r*np.sin(angle))

    return np.array( (x, y, r, angle) )

# number of steps to simulate
n = 1258

# get levy walk (strictly speaking, it seems to be a flight)
foo_random = random_walk(n)

# initialize figure
fig = plt.figure(figsize=(14,6))

# plot 2D random walk with Levy stepsize
ax1 = fig.add_subplot(1,2,1)
ax1.plot(foo_random[0,:], foo_random[1,:])
ax1.set_xlabel('x')
ax1.grid()
ax1.set_ylabel('y')
ax1.set_title('2D Random Walk')


plt.show()

#%%

#1D random-walk with continuous steps

steps = np.random.choice([-1, 1], 1258)
positions = np.cumsum(steps)

plt.plot(positions)
plt.grid()
plt.ylabel('Position')
plt.xlabel('Steps')
plt.title('1D Random Walk, Continuous Steps')
plt.show()
